from typing import Final

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from asyncio import to_thread

from bot.keyboards.inline import get_main_menu, CommandMainMenu

from bot.handlers.messages.types_requests import answer_free_question, search_internet, search_documents, rag_answer

router: Final[Router] = Router(name=__name__)


class FormState(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥.
    """

    waiting_search_web = State() # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    waiting_search_docs = State() # –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    waiting_ask = State() # –°–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    waiting_rag = State() # RAG-–∑–∞–ø—Ä–æ—Å


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return: None
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    user = message.from_user.first_name

    # –°–æ–∑–¥–∞–µ–º Inline –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    instruction_button = InlineKeyboardButton(
        text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        callback_data="show_instructions"
    )
    instruction_markup = InlineKeyboardMarkup(inline_keyboard=[[instruction_button]])

    html = (
        f"<b>–ü—Ä–∏–≤–µ—Ç, {user}! üëã</b>\n\n"
        f"<i>–Ø ‚Äì –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</i>\n\n"
        f"<b>1Ô∏è‚É£ /search_web</b> ‚Äì –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
        f"<b>2Ô∏è‚É£ /search_docs</b> ‚Äì –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n"
        f"<b>3Ô∏è‚É£ /ask</b> ‚Äì –°–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ò–ò\n"
        f"<b>4Ô∏è‚É£ /rag</b> ‚Äì RAG (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç+–¥–æ–∫–∏+–ò–ò)\n\n"
    )
    await message.answer(html, reply_markup=get_main_menu(), parse_mode=ParseMode.HTML)
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:",
        reply_markup=instruction_markup
    )

# --- /search_web ---
@router.message(F.text == CommandMainMenu().get_web())
@router.message(Command("search_web"))
async def cmd_search_web(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_web.
    :param message:  —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state:  –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return:  None
    """

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await state.set_state(FormState.waiting_search_web)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    html = "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:</i> <code>&lt;–∑–∞–ø—Ä–æ—Å&gt;</code>"
    await message.answer(html, parse_mode=ParseMode.HTML)


# --- /search_docs ---
@router.message(F.text == CommandMainMenu().get_docs())
@router.message(Command("search_docs"))
async def cmd_search_docs(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_docs.
    :param message:  —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state:  –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return:  None
    """

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await state.set_state(FormState.waiting_search_docs)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    html = "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:</i> <code>&lt;–∑–∞–ø—Ä–æ—Å&gt;</code>"
    await message.answer(html, parse_mode=ParseMode.HTML)


# --- /ask ---
@router.message(F.text == CommandMainMenu().get_ask())
@router.message(Command("ask"))
async def cmd_ask(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask.
    :param message:  —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state:  –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return:  None
    """

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await state.set_state(FormState.waiting_ask)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    html = "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</i> <code>&lt;–≤–æ–ø—Ä–æ—Å&gt;</code>"
    await message.answer(html, parse_mode=ParseMode.HTML)


# --- /rag ---
@router.message(F.text == CommandMainMenu().get_rag())
@router.message(Command("rag"))
async def cmd_rag(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rag.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :return: None
    """

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await state.set_state(FormState.waiting_rag)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    html = "<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG:</i> <code>&lt;–∑–∞–ø—Ä–æ—Å&gt;</code>"
    await message.answer(html, parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@router.message(FormState.waiting_search_web)
async def process_search_web(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = message.text.strip()
    if not query:
        await message.answer("<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.</i>", parse_mode=ParseMode.HTML)
        return

    await message.answer(f"<b>üîç –ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:</b> {query}", parse_mode=ParseMode.HTML)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    results = await search_internet(query)
    if not results:
        await message.answer("<i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>", parse_mode=ParseMode.HTML)
    else:
        html_parts = []
        for r in results:
            html_parts.append(
                f"‚Ä¢ <b>{r['–ò—Å—Ç–æ—á–Ω–∏–∫']}</b>: {r['–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞']} "
                f"<a href=\"{r['URL']}\">–°—Å—ã–ª–∫–∞</a>"
            )
        await message.answer("\n".join(html_parts), parse_mode=ParseMode.HTML)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—é)
        await state.set_state(None)


@router.message(FormState.waiting_search_docs)
async def process_search_docs(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = message.text.strip()
    if not query:
        await message.answer("<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.</i>", parse_mode=ParseMode.HTML)
        return

    await message.answer(f"<b>üìö –ò—â—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:</b> {query}", parse_mode=ParseMode.HTML)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    docs = await to_thread(search_documents, query)
    if not docs:
        await message.answer("<i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>", parse_mode=ParseMode.HTML)
    else:
        html_parts = []
        for d in docs:
            html_parts.append(d.page_content)
        await message.answer("\n\n".join(html_parts), parse_mode=ParseMode.HTML)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—é)
        await state.set_state(None)


@router.message(FormState.waiting_ask)
async def process_ask(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = message.text.strip()
    if not query:
        await message.answer("<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.</i>", parse_mode=ParseMode.HTML)
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id

    await message.answer(f"<b>‚ùì –í–æ–ø—Ä–æ—Å:</b> {query}", parse_mode=ParseMode.HTML)

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    answer = answer_free_question(query, session_id=str(user_id))

    await message.answer(answer, parse_mode=ParseMode.HTML)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—é)
    await state.set_state(None)


@router.message(FormState.waiting_rag)
async def process_rag_query(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è RAG-–∑–∞–ø—Ä–æ—Å–∞.
    :param state: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = message.text.strip()
    if not query:
        await message.answer("<i>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.</i>", parse_mode=ParseMode.HTML)
        return

    await message.answer(f"<b>ü§ñ RAG-–∑–∞–ø—Ä–æ—Å:</b> {query}", parse_mode=ParseMode.HTML)

    # –í—ã–ø–æ–ª–Ω—è–µ–º RAG-–∑–∞–ø—Ä–æ—Å
    md_answer = await rag_answer(query)

    await message.answer(md_answer, parse_mode=ParseMode.HTML)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—é)
    await state.set_state(None)
